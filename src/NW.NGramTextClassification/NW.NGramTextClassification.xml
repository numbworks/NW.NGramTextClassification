<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NW.NGramTextClassification</name>
    </assembly>
    <members>
        <member name="T:NW.NGramTextClassification.Arrays.ArrayManager">
            <inheritdoc cref="T:NW.NGramTextClassification.Arrays.IArrayManager"/>
        </member>
        <member name="M:NW.NGramTextClassification.Arrays.ArrayManager.#ctor">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.Arrays.ArrayManager"/> instance.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.Arrays.IArrayManager">
            <summary>Collects all the utility methods related to array management.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.Arrays.IArrayManager.AddDelimiter(System.String[],System.String)">
            <summary>
            It adds a provided delimiter among the items of the provided array. 'null' is a valid delimiter.
            <para>Example: if the delimiter is " ", an array like [ "This", "is", "a" ] becomes [ "This", " ", "is", " ", "a" ].</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/> 
        </member>
        <member name="M:NW.NGramTextClassification.Arrays.IArrayManager.GetSubset(System.String[],System.UInt32,System.UInt32)">
            <summary>
            It creates a subset of the provided length for the provided array. 
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>  
        </member>
        <member name="T:NW.NGramTextClassification.ITextClassifier">
            <summary>The entry point of this library.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.ITextClassifier.PredictLabel(System.String,NW.NGramTextClassification.NGramTokenization.INGramTokenizerRuleSet,System.Collections.Generic.List{NW.NGramTextClassification.LabeledExamples.LabeledExample})">
            <summary>
            Attempts to assign a label to <paramref name="text"/> by learning from <paramref name="labeledExamples"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>          
        </member>
        <member name="M:NW.NGramTextClassification.ITextClassifier.PredictLabel(System.String,System.Collections.Generic.List{NW.NGramTextClassification.LabeledExamples.LabeledExample})">
            <summary>
            Attempts to assign a label to <paramref name="text"/> by learning from <paramref name="labeledExamples"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>        
        </member>
        <member name="T:NW.NGramTextClassification.LabeledExamples.ILabeledExampleFactory">
            <summary>Collects all the methods to create a <see cref="T:NW.NGramTextClassification.LabeledExamples.LabeledExample"/>.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.LabeledExamples.ILabeledExampleFactory.TryCreateForRuleSet(System.UInt64,System.String,System.String,NW.NGramTextClassification.NGramTokenization.INGramTokenizerRuleSet)">
            <summary>
            Initializes a <see cref="T:NW.NGramTextClassification.LabeledExamples.LabeledExample"/> out of the provided parameters.
            <para>If one rule fails, no exception will be thrown and the method will continue processing the other rules.</para>
            <para>If all rules will fail, null will be returned.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NW.NGramTextClassification.LabeledExamples.ILabeledExampleFactory.TryCreateForRuleSet(System.UInt64,System.String,System.String)">
            <summary>
            Initializes a <see cref="T:NW.NGramTextClassification.LabeledExamples.LabeledExample"/> out of the provided parameters and <see cref="P:NW.NGramTextClassification.LabeledExamples.LabeledExampleFactory.DefaultTokenizerRuleSet"/>.
            <para>If one rule fails, no exception will be thrown and the method will continue processing the other rules.</para>
            <para>If all rules will fail, null will be returned.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NW.NGramTextClassification.LabeledExamples.ILabeledExampleFactory.TryCreateForRuleSet(System.Collections.Generic.List{System.ValueTuple{System.String,System.String}},NW.NGramTextClassification.NGramTokenization.INGramTokenizerRuleSet)">
            <summary>
            Initializes a collection of <see cref="T:NW.NGramTextClassification.LabeledExamples.LabeledExample"/> objects out of the provided parameters.
            <para>If one rule fails, no exception will be thrown and the method will continue processing the other rules.</para>
            <para>If all rules will fail, null will be returned.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NW.NGramTextClassification.LabeledExamples.ILabeledExampleFactory.TryCreateForRuleSet(System.Collections.Generic.List{System.ValueTuple{System.String,System.String}})">
            <summary>
            Initializes a collection of <see cref="T:NW.NGramTextClassification.LabeledExamples.LabeledExample"/> objects out of the provided parameters and <see cref="P:NW.NGramTextClassification.LabeledExamples.LabeledExampleFactory.DefaultTokenizerRuleSet"/>.
            <para>If one rule fails, no exception will be thrown and the method will continue processing the other rules.</para>
            <para>If all rules will fail, null will be returned.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:NW.NGramTextClassification.LabeledExamples.LabeledExample">
            <summary>A labeled example.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.LabeledExamples.LabeledExample.#ctor(System.UInt64,System.String,System.String,System.Collections.Generic.List{NW.NGramTextClassification.NGrams.INGram})">
            <summary>
            Initializes a <see cref="T:NW.NGramTextClassification.LabeledExamples.LabeledExample"/> instance.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>  
        </member>
        <member name="T:NW.NGramTextClassification.LabeledExamples.LabeledExampleFactory">
            <inheritdoc cref="T:NW.NGramTextClassification.LabeledExamples.ILabeledExampleFactory"/>
        </member>
        <member name="M:NW.NGramTextClassification.LabeledExamples.LabeledExampleFactory.#ctor(NW.NGramTextClassification.NGramTokenization.INGramTokenizer,System.UInt32)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.LabeledExamples.LabeledExampleFactory"/> instance.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.LabeledExamples.LabeledExampleFactory.#ctor">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.LabeledExamples.LabeledExampleFactory"/> instance using default parameters.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.Messages.MessageCollection">
            <summary>Collects all the messages used for logging and exceptions.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.NGrams.ANGram">
            <summary>A contiguous sequence of N items from a given sample of text.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.NGrams.Bigram">
            <inheritdoc cref="T:NW.NGramTextClassification.NGrams.ANGram"/>
        </member>
        <member name="M:NW.NGramTextClassification.NGrams.Bigram.#ctor(NW.NGramTextClassification.NGramTokenization.ITokenizationStrategy,System.String)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGrams.Bigram"/> instance.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.NGrams.Bigram.#ctor(System.String)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGrams.Bigram"/> instance using default parameters.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.NGrams.Fivegram">
            <inheritdoc cref="T:NW.NGramTextClassification.NGrams.ANGram"/>
        </member>
        <member name="M:NW.NGramTextClassification.NGrams.Fivegram.#ctor(NW.NGramTextClassification.NGramTokenization.ITokenizationStrategy,System.String)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGrams.Fivegram"/> instance.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.NGrams.Fivegram.#ctor(System.String)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGrams.Fivegram"/> instance using default parameters.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.NGrams.Fourgram">
            <inheritdoc cref="T:NW.NGramTextClassification.NGrams.ANGram"/>
        </member>
        <member name="M:NW.NGramTextClassification.NGrams.Fourgram.#ctor(NW.NGramTextClassification.NGramTokenization.ITokenizationStrategy,System.String)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGrams.Fourgram"/> instance.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.NGrams.Fourgram.#ctor(System.String)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGrams.Fourgram"/> instance using default parameters.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.NGrams.INGram">
            <summary>A contiguous sequence of N items from a given sample of text.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.NGrams.Monogram">
            <inheritdoc cref="T:NW.NGramTextClassification.NGrams.ANGram"/>
        </member>
        <member name="M:NW.NGramTextClassification.NGrams.Monogram.#ctor(NW.NGramTextClassification.NGramTokenization.ITokenizationStrategy,System.String)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGrams.Monogram"/> instance.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.NGrams.Monogram.#ctor(System.String)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGrams.Monogram"/> instance using default parameters.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.NGrams.Trigram">
            <inheritdoc cref="T:NW.NGramTextClassification.NGrams.ANGram"/>
        </member>
        <member name="M:NW.NGramTextClassification.NGrams.Trigram.#ctor(NW.NGramTextClassification.NGramTokenization.ITokenizationStrategy,System.String)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGrams.Trigram"/> instance.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.NGrams.Trigram.#ctor(System.String)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGrams.Trigram"/> instance using default parameters.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.NGramTokenization.INGramTokenizer">
            <summary>Collects methods that break a text into tokens of type <see cref="T:NW.NGramTextClassification.NGrams.INGram"/>.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.NGramTokenization.INGramTokenizer.GetN``1">
            <summary>Returns N for the provided <see cref="T:NW.NGramTextClassification.NGrams.INGram"/>.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.NGramTokenization.INGramTokenizer.DoForMonogram(System.String)">
            <summary>Breaks <paramref name="text"/> into a collection of tokens according to <see cref="!:Monogram.N"/>.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NW.NGramTextClassification.NGramTokenization.INGramTokenizer.DoForBigram(System.String)">
            <summary>Breaks <paramref name="text"/> into a collection of tokens according to <see cref="!:Bigram.N"/>.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NW.NGramTextClassification.NGramTokenization.INGramTokenizer.DoForTrigram(System.String)">
            <summary>Breaks <paramref name="text"/> into a collection of tokens according to <see cref="!:Trigram.N"/>.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NW.NGramTextClassification.NGramTokenization.INGramTokenizer.DoForFourgram(System.String)">
            <summary>Breaks <paramref name="text"/> into a collection of tokens according to <see cref="!:Fourgram.N"/>.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NW.NGramTextClassification.NGramTokenization.INGramTokenizer.DoForFivegram(System.String)">
            <summary>Breaks <paramref name="text"/> into a collection of tokens according to <see cref="!:Fivegram.N"/>.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NW.NGramTextClassification.NGramTokenization.INGramTokenizer.DoForRuleSet(System.String,NW.NGramTextClassification.NGramTokenization.INGramTokenizerRuleSet)">
            <summary>
            Breaks <paramref name="text"/> into a collection of tokens according to <paramref name="tokenizerRuleset"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:NW.NGramTextClassification.NGramTokenization.INGramTokenizer.TryDoForRuleSet(System.String,NW.NGramTextClassification.NGramTokenization.INGramTokenizerRuleSet)">
            <summary>
            Attempts to breaks <paramref name="text"/> into a collection of tokens according to <paramref name="tokenizerRuleset"/>.
            <para>If one rule fails, no exception will be thrown and the method will continue processing the other rules.</para>
            <para>If all rules will fail, null will be returned.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:NW.NGramTextClassification.NGramTokenization.INGramTokenizerRuleSet">
            <summary>A collection of rules for <see cref="T:NW.NGramTextClassification.NGramTokenization.INGramTokenizer"/>.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.NGramTokenization.ITokenizationStrategy">
            <summary>A strategy to break a piece of text into tokens.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.NGramTokenization.NGramTokenizer">
            <inheritdoc cref="T:NW.NGramTextClassification.NGramTokenization.INGramTokenizer"/>
        </member>
        <member name="M:NW.NGramTextClassification.NGramTokenization.NGramTokenizer.#ctor(NW.NGramTextClassification.Arrays.IArrayManager,NW.NGramTextClassification.NGramTokenization.ITokenizationStrategy)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGramTokenization.NGramTokenizer"/> instance.</summary>
            <exception cref="T:System.ArgumentNullException"/> 
        </member>
        <member name="M:NW.NGramTextClassification.NGramTokenization.NGramTokenizer.#ctor">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGramTokenization.NGramTokenizer"/> instance using default parameters.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.NGramTokenization.NGramTokenizerRuleSet">
            <inheritdoc cref="T:NW.NGramTextClassification.NGramTokenization.INGramTokenizerRuleSet"/>
        </member>
        <member name="M:NW.NGramTextClassification.NGramTokenization.NGramTokenizerRuleSet.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGramTokenization.NGramTokenizerRuleSet"/> instance.</summary>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:NW.NGramTextClassification.NGramTokenization.NGramTokenizerRuleSet.#ctor">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGramTokenization.NGramTokenizerRuleSet"/> instance using default parameters.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.NGramTokenization.TokenizationStrategy">
            <inheritdoc cref="T:NW.NGramTextClassification.NGramTokenization.ITokenizationStrategy"/>
        </member>
        <member name="M:NW.NGramTextClassification.NGramTokenization.TokenizationStrategy.#ctor(System.String,System.String,System.Boolean)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGramTokenization.TokenizationStrategy"/> instance.</summary>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:NW.NGramTextClassification.NGramTokenization.TokenizationStrategy.#ctor">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.NGramTokenization.TokenizationStrategy"/> instance using default parameters.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.Similarity.ISimilarityIndexCalculator">
            <summary>A component able to calculate a <see cref="T:NW.NGramTextClassification.Similarity.SimilarityIndex"/>.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.Similarity.ISimilarityIndexCalculator.Do(System.Collections.Generic.List{NW.NGramTextClassification.NGrams.INGram},System.Collections.Generic.List{NW.NGramTextClassification.NGrams.INGram},System.Func{System.Double,System.Double})">
            <summary>Calculates the similarity between <paramref name="list1"/> and <paramref name="list2"/>.</summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/> 
        </member>
        <member name="T:NW.NGramTextClassification.Similarity.SimilarityIndex">
            <summary>The result of a similarity calculation.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.Similarity.SimilarityIndex.#ctor(System.UInt64,System.String,System.Double)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.Similarity.SimilarityIndex"/> instance.</summary>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:NW.NGramTextClassification.Similarity.SimilarityIndexAverage">
            <summary>The average of multiple <see cref="T:NW.NGramTextClassification.Similarity.SimilarityIndex"/>.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.Similarity.SimilarityIndexAverage.#ctor(System.String,System.Double)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.Similarity.SimilarityIndexAverage"/> instance.</summary>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:NW.NGramTextClassification.Similarity.SimilarityIndexCalculatorJaccard">
            <inheritdoc cref="T:NW.NGramTextClassification.Similarity.ISimilarityIndexCalculator"/>
        </member>
        <member name="M:NW.NGramTextClassification.Similarity.SimilarityIndexCalculatorJaccard.#ctor">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.Similarity.SimilarityIndexCalculatorJaccard"/> instance.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.TextClassifier">
            <inheritdoc cref="T:NW.NGramTextClassification.ITextClassifier"/>
        </member>
        <member name="M:NW.NGramTextClassification.TextClassifier.#ctor(NW.NGramTextClassification.TextClassifierComponents,NW.NGramTextClassification.TextClassifierSettings)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.TextClassifier"/> instance.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.TextClassifier.#ctor">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.TextClassifier"/> instance using default parameters.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.TextClassifierComponents">
            <summary>Collects all the dependencies required by <see cref="T:NW.NGramTextClassification.TextClassifier"/>.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.TextClassifierComponents.#ctor(NW.NGramTextClassification.NGramTokenization.INGramTokenizer,NW.NGramTextClassification.Similarity.ISimilarityIndexCalculator,System.Func{System.Double,System.Double},System.Func{System.String,System.UInt32,System.String},System.Action{System.String})">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.TextClassifierComponents"/> instance.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.TextClassifierComponents.#ctor">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.TextClassifierComponents"/> instance using default parameters.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.TextClassifierResult">
            <summary>The result of a text classification.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.TextClassifierResult.#ctor(System.String,System.Collections.Generic.List{NW.NGramTextClassification.Similarity.SimilarityIndex},System.Collections.Generic.List{NW.NGramTextClassification.Similarity.SimilarityIndexAverage})">
            <summary>
            Initializes a <see cref="T:NW.NGramTextClassification.TextClassifierResult"/> instance.
            <para>When the text classification didn't return any value, <paramref name="label"/> can also be null. Therefore null is an accepted value.</para>
            </summary>
        </member>
        <member name="T:NW.NGramTextClassification.TextClassifierSettings">
            <summary>Collects all the global settings required by this library.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.TextClassifierSettings.#ctor(System.UInt32)">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.TextClassifierSettings"/> instance.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.TextClassifierSettings.#ctor">
            <summary>Initializes a <see cref="T:NW.NGramTextClassification.TextClassifierSettings"/> instance using default parameters.</summary>
        </member>
        <member name="T:NW.NGramTextClassification.Validation.Validator">
            <summary>Collects all the validation methods.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ValidateLength``1(System.UInt32)">
            <summary>Throws an exception of type <see cref="!:TException"/> when <paramref name="length"/> is less than one.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ValidateLength(System.UInt32)">
            <summary>Throws an exception of type <see cref="T:System.ArgumentException"/> when <paramref name="length"/> is less than one.</summary>        
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ValidateObject``1(System.Object,System.String)">
            <summary>Throws an exception of type <see cref="!:TException"/> when <paramref name="obj"/> is null.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ValidateObject(System.Object,System.String)">
            <summary>Throws an exception of type <see cref="T:System.ArgumentNullException"/> when <paramref name="obj"/> is null.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ValidateArray``1(``0[],System.String)">
            <summary>Throws an exception of type <see cref="T:System.ArgumentNullException"/> when <paramref name="arr"/> is null or of type <see cref="T:System.ArgumentException"/> when <paramref name="arr"/> is empty.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ValidateArrayNull``2(``1[],System.String)">
            <summary>Throws an exception of type <see cref="T:System.ArgumentNullException"/> when <paramref name="arr"/> is null.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ValidateArrayEmpty``2(``1[],System.String)">
            <summary>Throws an exception of type <see cref="T:System.ArgumentException"/> when <paramref name="arr"/> is empty.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ValidateList``1(System.Collections.Generic.List{``0},System.String)">
            <summary>Throws an exception of type <see cref="T:System.ArgumentNullException"/> when <paramref name="list"/> is null or of type <see cref="T:System.ArgumentException"/> when <paramref name="list"/> is empty.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ValidateListNull``2(System.Collections.Generic.List{``1},System.String)">
            <summary>Throws an exception of type <see cref="T:System.ArgumentNullException"/> when <paramref name="arr"/> is null.</summary>        
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ValidateListEmpty``2(System.Collections.Generic.List{``1},System.String)">
            <summary>Throws an exception of type <see cref="T:System.ArgumentException"/> when <paramref name="list"/> is empty.</summary>        
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ValidateStringNullOrWhiteSpace``1(System.String,System.String)">
            <summary>Throws an exception of type <see cref="!:TException"/> when <paramref name="str"/> is null or whitespace.</summary> 
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ValidateStringNullOrWhiteSpace(System.String,System.String)">
            <summary>Throws an exception of type <see cref="T:System.ArgumentNullException"/> when <paramref name="str"/> is null or whitespace.</summary>         
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ValidateStringNullOrEmpty``1(System.String,System.String)">
            <summary>Throws an exception of type <see cref="!:TException"/> when <paramref name="str"/> is null or empty.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ValidateStringNullOrEmpty(System.String,System.String)">
            <summary>Throws an exception of type <see cref="T:System.ArgumentNullException"/> when <paramref name="str"/> is null or empty.</summary>  
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ThrowIfFirstIsGreaterOrEqual``1(System.Int32,System.String,System.Int32,System.String)">
            <summary>Throws an exception of type <see cref="!:TException"/> when <paramref name="value1"/> is greater or equal than <paramref name="value2"/>.</summary> 
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ThrowIfFirstIsGreaterOrEqual(System.Int32,System.String,System.Int32,System.String)">
            <summary>Throws an exception of type <see cref="T:System.ArgumentException"/> when <paramref name="value1"/> is greater or equal than <paramref name="value2"/>.</summary> 
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ThrowIfFirstIsGreater``1(System.Int32,System.String,System.Int32,System.String)">
            <summary>Throws an exception of type <see cref="!:TException"/> when <paramref name="value1"/> is greater than <paramref name="value2"/>.</summary> 
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ThrowIfFirstIsGreater(System.Int32,System.String,System.Int32,System.String)">
            <summary>Throws an exception of type <see cref="T:System.ArgumentException"/> when <paramref name="value1"/> is greater than <paramref name="value2"/>.</summary> 
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ThrowIfLessThanOne``1(System.UInt32,System.String)">
            <summary>Throws an exception of type <see cref="!:TException"/> when <paramref name="value"/> is less than one.</summary>
        </member>
        <member name="M:NW.NGramTextClassification.Validation.Validator.ThrowIfLessThanOne(System.UInt32,System.String)">
            <summary>Throws an exception of type <see cref="T:System.ArgumentException"/> when <paramref name="length"/> is less than one.</summary>
        </member>
    </members>
</doc>
